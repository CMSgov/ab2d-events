name: promote-events

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
  workflow_dispatch:
    inputs:
      environment:
        required: true
        type: choice
        options:
          - prod_test
          - prod

permissions:
  contents: read
  id-token: write

jobs:
  promote:
    runs-on: self-hosted
    steps:
      - name: Set environment context
        id: set-env
        run: |
          echo "env_name=${{ inputs.environment }}" >> $GITHUB_OUTPUT

      - name: Define source/destination ECR info
        id: repos
        run: |
          if [ "${{ steps.set-env.outputs.env_name }}" == "prod_test" ]; then
            echo "SOURCE_ENV=test" >> $GITHUB_OUTPUT
            echo "SOURCE_REPO=ab2d-impl-services" >> $GITHUB_OUTPUT
            echo "DEST_REPO=ab2d-prod-test-services" >> $GITHUB_OUTPUT
          elif [ "${{ steps.set-env.outputs.env_name }}" == "prod" ]; then
            echo "SOURCE_ENV=prod_test" >> $GITHUB_OUTPUT
            echo "SOURCE_REPO=ab2d-prod-test-services" >> $GITHUB_OUTPUT
            echo "DEST_REPO=ab2d-prod-services" >> $GITHUB_OUTPUT
          fi
          echo "TAG_NAME=event-service" >> $GITHUB_ENV

      - name: Assume source account to pull image
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets[format('{0}_ACCOUNT', steps.repos.outputs.SOURCE_ENV)] }}:role/delegatedadmin/developer/ab2d-${{ steps.repos.outputs.SOURCE_ENV }}-github-actions

      - name: Pull manifest from source repo
        id: pull
        env:
          SOURCE_REPO: ${{ steps.repos.outputs.SOURCE_REPO }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          TAG_NAME: event-service
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ECR_REPO_DOMAIN="$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
          TOKEN=$(aws ecr get-authorization-token --output text --query 'authorizationData[].authorizationToken')
          CONTENT_TYPE="application/vnd.docker.distribution.manifest.v2+json"

          echo "Pulling manifest from $SOURCE_REPO:$TAG_NAME"
          MANIFEST=$(curl -sS -H "Authorization: Basic $TOKEN" -H "Accept: $CONTENT_TYPE" \
            "https://$ECR_REPO_DOMAIN/v2/$SOURCE_REPO/manifests/$TAG_NAME")

          # Escape newlines for JSON storage
          MANIFEST_ESCAPED=$(echo "$MANIFEST" | jq -c .)
          echo "manifest=$MANIFEST_ESCAPED" >> $GITHUB_OUTPUT

      - name: Assume destination account to retag image
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.prod_ACCOUNT }}:role/delegatedadmin/developer/ab2d-prod-github-actions

      - name: Push image tag to destination repo
        env:
          DEST_REPO: ${{ steps.repos.outputs.DEST_REPO }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          TAG_NAME: event-service
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ECR_REPO_DOMAIN="$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
          TOKEN=$(aws ecr get-authorization-token --output text --query 'authorizationData[].authorizationToken')
          CONTENT_TYPE="application/vnd.docker.distribution.manifest.v2+json"
          MANIFEST='${{ steps.pull.outputs.manifest }}'

          echo "Tagging image as $TAG_NAME in $DEST_REPO"
          curl -sS -X PUT -H "Authorization: Basic $TOKEN" -H "Content-Type: $CONTENT_TYPE" \
            -d "$MANIFEST" "https://$ECR_REPO_DOMAIN/v2/$DEST_REPO/manifests/$TAG_NAME"
